<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XiaochenCui&#39;s Blog</title>
    <link>https://cuixiaochen.com/</link>
    <description>Recent content on XiaochenCui&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Jul 2020 17:20:59 +0800</lastBuildDate>
    
	<atom:link href="https://cuixiaochen.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Simple DB In Rust - Looking Back A Month Later</title>
      <link>https://cuixiaochen.com/posts/simple-db-rust-1/</link>
      <pubDate>Thu, 09 Jul 2020 17:20:59 +0800</pubDate>
      
      <guid>https://cuixiaochen.com/posts/simple-db-rust-1/</guid>
      <description>Time flies, and one month has passed since the project started.
After this month of fighting with rust, I achieved the basic sequential scanning function. Now, it&amp;rsquo;s time to summarize the work and think about how to advance the project completion faster and how to write better quality rust code.
First, I made the mistake of premature abstraction. Since the simple-db-hw project I refer to is written in java, it uses a lot of design patterns and OOP ideas.</description>
    </item>
    
    <item>
      <title>Simple DB In Rust - Started</title>
      <link>https://cuixiaochen.com/posts/simple-db-rust-0/</link>
      <pubDate>Tue, 09 Jun 2020 14:52:55 +0800</pubDate>
      
      <guid>https://cuixiaochen.com/posts/simple-db-rust-0/</guid>
      <description>After spending a lot of time, I finally completed all the tasks of mit 6.830 (source code). Now we almost have a simple database that can perform a series of operations such as querying, storing, and deleting data. The transaction and index has been achieved. We also implemented write-ahead log to prevent data lose from system crash. 99% of the tests (including unit tests and integration tests) can be successfully passed.</description>
    </item>
    
    <item>
      <title>System Research Syllabus</title>
      <link>https://cuixiaochen.com/posts/system-research-syllabus/</link>
      <pubDate>Tue, 08 Oct 2019 13:56:32 +0800</pubDate>
      
      <guid>https://cuixiaochen.com/posts/system-research-syllabus/</guid>
      <description>The knowledge involved in building large-scale system, covering everthing form architecture to algorithms, from macro to micro.
Comments and suggestions are welcomed.
(Content is being sorted out, a little bit confusing right now)
Distributed Systems  Time, Clocks, and the Ordering of Events in a Distributed System The End of an Architectural Era (It’s Time for a Complete Rewrite)  Data Processing  Spark: Cluster Computing with Working Sets  Stream Processing  Storm @Twitter Samza: Stateful Scalable Stream Processing at LinkedIn Drill  SQL Workloads  Presto: SQL on Everything Dremel: Interactive Analysis of Web-Scale Datasets  Distrubuted Storage System  Atlas: Baidu’s Key-value Storage System for Cloud Data PAST: Persistent and Anonymous Storage in a Peer-to-Peer Networking Environment OceanStore: An Architecture for Global-Scale Persistent Storage Alluxio: A Virtual Distributed File System  Database Motivation  A Relational Model of Data for Large Shared Data Banks  Architecture  Architecture of a Database System Column Stores vs Row Stores : How Different Are They Really Socrates: The New SQL Server in the Cloud Large-scale Incremental Processing Using Distributed Transactions and Notifications Readings in Database Systems, 5th Edition Aria: A Fast and Practical Deterministic OLTP Database ☑ Bigtable: A Distributed Storage System for Structured Data Alibaba Hologres: A Cloud-Native Service for Hybrid Serving/Analytical Processing LLAMA: A Cache/Storage Subsystem for Modern Hardware POLARDB: InnoDB based shared-everything storage solution FoundationDB: A Distributed Unbundled Transactional Key Value Store Greenplum: A Hybrid Database for Transactional and Analytical Workloads  PostgreSQL  THE DESIGN OF POSTGRES THE IMPLEMENTATION OF POSTGRES [ROWE87] The POSTGRES Data Model PostgreSQL Concurrency with MVCC | Heroku Dev Center  MVCC  PostgreSQL Concurrency with MVCC | Heroku Dev Center 浅谈数据库并发控制 - 锁和 MVCC - 面向信仰编程  Column Storage  The Vertica Analytic Database: C-Store 7 Years Later  SQL Parser  Apache Calcite: A Foundational Framework for Optimized Query Processing Over Heterogeneous Data Sources  SQL Test  ☑︎TiDB SQL 兼容性测试工具简介（Compatibility testing tool profile）  Query Optimization  Access Path Selection in a Relational Database Management System Statistical Profile Estimation in Database Systems Building a Modern Database Using LLVM EFFICIENCY IN THE COLUMBIA DATABASE QUERY OPTIMIZER The Volcano Optimizer Generator: Extensibility and Efficient Search The Cascades Framework for Query Optimization 逻辑优化 | PingCAP Docs ☑︎Cascades Optimizer - 知乎 ☑︎Cost-Based Optimizer | CockroachDB Docs  Query Compilation  ☑︎查询编译综述 - 知乎 Runtime Code Generation in Cloudera Impala Generating code for holistic query evaluation Efficiently Compiling Efficient Query Plans for Modern Hardware Relaxed Operator Fusion for In-Memory Databases: Making Compilation, Vectorization, and Prefetching Work Together At Last How to Architect a Query Compiler, Revisited Code generation for efficient query processing in managed runtimes  Join Algorithm  Nested Loop Join  Simple Nested Loops Join  tuple-at-a-time page-at-a-time  Block Nested Loops Join Index Nested Loops Join  Sort-Merge Join Hash Join</description>
    </item>
    
  </channel>
</rss>