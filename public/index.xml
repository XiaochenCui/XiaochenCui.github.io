<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XiaochenCui&#39;s Blog</title>
    <link>https://cuixiaochen.com/</link>
    <description>Recent content on XiaochenCui&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Jul 2020 17:20:59 +0800</lastBuildDate>
    
	<atom:link href="https://cuixiaochen.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Simple DB In Rust - Looking Back A Month Later</title>
      <link>https://cuixiaochen.com/posts/simple-db-rust-1/</link>
      <pubDate>Thu, 09 Jul 2020 17:20:59 +0800</pubDate>
      
      <guid>https://cuixiaochen.com/posts/simple-db-rust-1/</guid>
      <description>Time flies, and one month has passed since the project started.
After this month of fighting with rust, I achieved the basic sequential scanning function. Now, it&amp;rsquo;s time to summarize the work and think about how to advance the project completion faster and how to write better quality rust code.
First, I made the mistake of premature abstraction. Since the simple-db-hw project I refer to is written in java, it uses a lot of design patterns and OOP ideas.</description>
    </item>
    
    <item>
      <title>Simple DB In Rust - Started</title>
      <link>https://cuixiaochen.com/posts/simple-db-rust-0/</link>
      <pubDate>Tue, 09 Jun 2020 14:52:55 +0800</pubDate>
      
      <guid>https://cuixiaochen.com/posts/simple-db-rust-0/</guid>
      <description>After spending a lot of time, I finally completed all the tasks of mit 6.830 (source code). Now we almost have a simple database that can perform a series of operations such as querying, storing, and deleting data. The transaction and index has been achieved. We also implemented write-ahead log to prevent data lose from system crash. 99% of the tests (including unit tests and integration tests) can be successfully passed.</description>
    </item>
    
    <item>
      <title>System Research Syllabus</title>
      <link>https://cuixiaochen.com/posts/system-research-syllabus/</link>
      <pubDate>Tue, 08 Oct 2019 13:56:32 +0800</pubDate>
      
      <guid>https://cuixiaochen.com/posts/system-research-syllabus/</guid>
      <description>The knowledge involved in building large-scale system, covering everthing form architecture to algorithms, from macro to micro.
Comments and suggestions are welcomed.
(Content is being sorted out, a little bit confusing right now)
Distributed Systems  Time, Clocks, and the Ordering of Events in a Distributed System The End of an Architectural Era (It’s Time for a Complete Rewrite)  Data Processing  Spark: Cluster Computing with Working Sets  Stream Processing  Storm @Twitter Samza: Stateful Scalable Stream Processing at LinkedIn Drill  SQL Workloads  Presto: SQL on Everything Dremel: Interactive Analysis of Web-Scale Datasets  Distrubuted Storage System  Atlas: Baidu’s Key-value Storage System for Cloud Data PAST: Persistent and Anonymous Storage in a Peer-to-Peer Networking Environment OceanStore: An Architecture for Global-Scale Persistent Storage Alluxio: A Virtual Distributed File System  Database Motivation  A Relational Model of Data for Large Shared Data Banks  Architecture  Architecture of a Database System Column Stores vs Row Stores : How Different Are They Really Socrates: The New SQL Server in the Cloud Large-scale Incremental Processing Using Distributed Transactions and Notifications Readings in Database Systems, 5th Edition Aria: A Fast and Practical Deterministic OLTP Database ☑ Bigtable: A Distributed Storage System for Structured Data  SQL Parser  Apache Calcite: A Foundational Framework for Optimized Query Processing Over Heterogeneous Data Sources  Query Optimization  Access Path Selection in a Relational Database Management System Statistical Profile Estimation in Database Systems Building a Modern Database Using LLVM Efficiently Compiling Efficient Query Plans for Modern Hardware EFFICIENCY IN THE COLUMBIA DATABASE QUERY OPTIMIZER The Volcano Optimizer Generator: Extensibility and Efficient Search The Cascades Framework for Query Optimization  Join Algorithm  Nested Loop Join  Simple Nested Loops Join  tuple-at-a-time page-at-a-time  Block Nested Loops Join Index Nested Loops Join  Sort-Merge Join Hash Join  Lock &amp;amp; Transaction  Concurrency Control and Recovery Unreliable Guide To Locking Purchase Link: Transaction Processing: Concepts and Techniques Concurrency Control and Recovery in Database Systems Purchase Link: Theory of Database Concurrency Control (Principles of computer science series) Purchase Link: Access path selection in a relational database management system The Benchmark Handbook: For Database and Transaction Processing Systems  Log  Physical log Logical logging Physiological logging Write Ahead Logging (WAL)  Deadlock Handling  Deadlock avoidance Deadlock detection  Timeout Wait-for graph    Two-Phase Locking(2PL)  University of Waterloo CS 448 Database Systems - Two Phase Locking DBMS | Concurrency Control Protocol | Two Phase Locking (2-PL)-I - GeeksforGeeks  Classification of 2PL  Basic 2PL Strict 2PL Conservative 2PL Rigorous 2PL   Isolation Level  Read uncommited Read commited Repeatable read Serializale  Concurrency Control  Lock Optimistic concurrency control Multiversion concurrency control (MVCC)  Optimistic Concurrency Control  On Optimistic Methods for Concurrency Control  Recovery Write Ahead Logging (WAL)  ARIES: A Transaction Recovery Method Supporting Fine-Granularity Locking and Partial Rollbacks Using Write-Ahead Logging  Write Behind Logging  Write Behind Logging  Others  Using Crash Hoare Logic for Certifying the FSCQ File System  Storage  TAO: Facebook’s Distributed Data Store for the Social Graph Scaling Memcache at Facebook  BLOB Storage  ☑ Finding a needle in Haystack: Facebook’s photo storage ☑ f4: Facebook’s Warm BLOB Storage System  Distributed File System  Ceph: A Scalable, High-Performance Distributed File System  Disk Error Correction Reed-Solomon  Reed–Solomon error correction - Wikipedia POLYNOMIAL CODES OVER CERTAIN FINITE FIELDS  Data Structures  B Tree</description>
    </item>
    
  </channel>
</rss>